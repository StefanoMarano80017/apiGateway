server:
  port: 8080

spring:
  redis: 
    host: redis_rate_limiter
    port: 6380
    timeout: 20000  
  
  cache:
    type: redis 

  cloud:
    gateway:
      routes:
        - id: fallback-route
          uri: http://localhost:8080/fallback # Dove si gestisce il fallback
          predicates:
            - Path=/fallback
        - id: sample-route
          uri: http://httpbin.dev:80
          predicates:
            - Path=/test/**
          filters:
            - RewritePath=/test/(?<segment>.*), /${segment}
            - name: CircuitBreaker
              args:
                name: exampleCircuitBreaker
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 1     # ottengo un token al secondo 
                redis-rate-limiter.burstCapacity: 1     # burst massima di 1 richiesta
                redis-rate-limiter.requestedTokens: 1  # 10 token per una richiesta -> 1 richiesta ogni 10 sec
                key-resolver: "#{@ipKeyResolver}"  # Resolver basato sull'header X-Forwarded-For
            - name: RedisCache
              args:
                ttl: 30  # Imposta il TTL della cache a 30 secondi

# Configurazioni aggiuntive per il logging e altre personalizzazioni
logging:
  level:
    org.springframework.cloud.gateway: INFO

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      enabled: true
    env:
      enabled: true
      show-values: ALWAYS

  metrics:
    tags:
      application: apiGateway
